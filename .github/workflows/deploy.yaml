name: Deploy Web & Admin to Vercel

on:
  # 수동 실행
  workflow_dispatch:
    inputs:
      target:
        description: "배포할 앱 선택"
        required: true
        default: "all"
        type: choice
        options: [all, web, admin]

  # development 브랜치 자동
  push:
    branches: [development]

jobs:
  # ───────── 변경 파일 필터 ─────────
  # ───────── 변경 파일 필터 ─────────
  filter:
    runs-on: ubuntu-latest
    outputs:
      web:   ${{ steps.set.outputs.web }}
      admin: ${{ steps.set.outputs.admin }}

    steps:
      - uses: actions/checkout@v4

      # A. push 이벤트용: 변경 경로 계산
      - id: paths
        if: github.event_name == 'push'
        uses: dorny/paths-filter@v2
        with:
          filters: |
            web:
              - 'apps/web/**'
            admin:
              - 'apps/admin/**'

      # B. 결과값 통합
      - id: set
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            echo "web=${{ steps.paths.outputs.web }}"   >> "$GITHUB_OUTPUT"
            echo "admin=${{ steps.paths.outputs.admin }}" >> "$GITHUB_OUTPUT"
          else
            # workflow_dispatch → 사용자가 고른 타깃으로 출력값 강제 true/false
            case "${{ github.event.inputs.target }}" in
              web)   echo "web=true"  >> "$GITHUB_OUTPUT"; echo "admin=false" >> "$GITHUB_OUTPUT" ;;
              admin) echo "web=false" >> "$GITHUB_OUTPUT"; echo "admin=true"  >> "$GITHUB_OUTPUT" ;;
              all|*) echo "web=true"  >> "$GITHUB_OUTPUT"; echo "admin=true"  >> "$GITHUB_OUTPUT" ;;
            esac
          fi

  # ───────── WEB ─────────
  deploy-web:
    needs: [filter]
    if: |
      (github.event_name == 'workflow_dispatch' && 
       (github.event.inputs.target == 'all' || github.event.inputs.target == 'web')) ||
      (github.event_name == 'push' && needs.filter.outputs.web == 'true')
    runs-on: ubuntu-latest
    concurrency: web-prod
    env:
      APP_DIR: ${{ github.workspace }}
      VERCEL_TOKEN:      ${{ secrets.VERCEL_TOKEN }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_WEB }}
      PROD_ALIAS:        "web.dddorok.vercel.app"

    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with: { version: 9 }
      - run: pnpm install --frozen-lockfile

      # Prebuilt 과정(루트 기준)
      - run: npx vercel pull --yes --environment=production --token="$VERCEL_TOKEN"
      - run: |
          npx vercel build --prod --token="$VERCEL_TOKEN"
          ls -al .vercel/output

      # Deploy
      - id: deploy
        run: |
          DEPLOY_URL=$(npx vercel deploy . --prebuilt --prod --yes --token="$VERCEL_TOKEN" | tail -1)
          echo "url=$DEPLOY_URL" >> "$GITHUB_OUTPUT"

      # Slack
      - name: Slack Notify Success
        if: success()
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          curl -X POST -H 'Content-type: application/json' \
               --data "$(jq -n \
                 --arg t   "✅ *배포 성공 - dddorok-frontend-web* 🚀" \
                 --arg msg "${{ github.event.head_commit.message }}" \
                 --arg repo "${{ github.repository }}" \
                 --arg sha  "${{ github.sha }}" \
                 --arg run  "${{ github.run_id }}" \
                 '{text: ($t + "\n\n*커밋 메시지:*\n" + $msg
                   + "\n\n*커밋 링크:* <https://github.com/" + $repo + "/commit/" + $sha + "|🔗 확인하기>"
                   + "\n*워크플로우:* <https://github.com/" + $repo + "/actions/runs/" + $run + "|🛠 Action 확인하기>\n\n<@U08KFMBSXB9>")}')" \
               ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Slack Notify Failure
        if: failure()
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B || echo '')
          curl -X POST -H 'Content-type: application/json' \
               --data "$(jq -n \
                 --arg t   "🚨 *배포 실패 - dddorok-frontend-web* 🚨" \
                 --arg msg "${{ github.event.head_commit.message }}" \
                 --arg repo "${{ github.repository }}" \
                 --arg sha  "${{ github.sha }}" \
                 --arg run  "${{ github.run_id }}" \
                 '{text: ($t + "\n\n*커밋 메시지:*\n" + $msg
                   + "\n\n*커밋 링크:* <https://github.com/" + $repo + "/commit/" + $sha + "|🔗 확인하기>"
                   + "\n*워크플로우:* <https://github.com/" + $repo + "/actions/runs/" + $run + "|🛠 Action 확인하기>\n\n🔴 즉시 확인 및 조치 요망! <@U08KFMBSXB9>")}')" \
               ${{ secrets.SLACK_WEBHOOK_URL }}

  # ───────── ADMIN ─────────
  deploy-admin:
    needs: [filter]
    if: |
      (github.event_name == 'workflow_dispatch' && 
       (github.event.inputs.target == 'all' || github.event.inputs.target == 'admin')) ||
      (github.event_name == 'push' && needs.filter.outputs.admin == 'true')
    runs-on: ubuntu-latest
    concurrency: admin-prod
    env:
      APP_DIR: ${{ github.workspace }}
      VERCEL_TOKEN:      ${{ secrets.VERCEL_TOKEN }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_ADMIN }}
      PROD_ALIAS:        "admin.dddorok.vercel.app"

    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with: { version: 9 }
      - run: pnpm install --frozen-lockfile

      - run: npx vercel pull --yes --environment=production --token="$VERCEL_TOKEN"
      - run: |
          npx vercel build --prod --token="$VERCEL_TOKEN"
          ls -al .vercel/output

      - id: deploy
        run: |
          DEPLOY_URL=$(npx vercel deploy . --prebuilt --prod --yes --token="$VERCEL_TOKEN" | tail -1)
          echo "url=$DEPLOY_URL" >> "$GITHUB_OUTPUT"

      # Slack(성공/실패 동일 패턴)
      - name: Slack Notify Success
        if: success()
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          curl -X POST -H 'Content-type: application/json' \
               --data "$(jq -n \
                 --arg t   "✅ *배포 성공 - dddorok-frontend-admin* 🚀" \
                 --arg msg "${{ github.event.head_commit.message }}" \
                 --arg repo "${{ github.repository }}" \
                 --arg sha  "${{ github.sha }}" \
                 --arg run  "${{ github.run_id }}" \
                 '{text: ($t + "\n\n*커밋 메시지:*\n" + $msg
                   + "\n\n*커밋 링크:* <https://github.com/" + $repo + "/commit/" + $sha + "|🔗 확인하기>"
                   + "\n*워크플로우:* <https://github.com/" + $repo + "/actions/runs/" + $run + "|🛠 Action 확인하기>\n\n<@U08KFMBSXB9>")}')" \
               ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Slack Notify Failure
        if: failure()
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B || echo '')
          curl -X POST -H 'Content-type: application/json' \
               --data "$(jq -n \
                 --arg t   "🚨 *배포 실패 - dddorok-frontend-admin* 🚨" \
                 --arg msg "${{ github.event.head_commit.message }}" \
                 --arg repo "${{ github.repository }}" \
                 --arg sha  "${{ github.sha }}" \
                 --arg run  "${{ github.run_id }}" \
                 '{text: ($t + "\n\n*커밋 메시지:*\n" + $msg
                   + "\n\n*커밋 링크:* <https://github.com/" + $repo + "/commit/" + $sha + "|🔗 확인하기>"
                   + "\n*워크플로우:* <https://github.com/" + $repo + "/actions/runs/" + $run + "|🛠 Action 확인하기>\n\n🔴 즉시 확인 및 조치 요망! <@U08KFMBSXB9>")}')" \
               ${{ secrets.SLACK_WEBHOOK_URL }}
      
